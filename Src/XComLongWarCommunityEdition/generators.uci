/**************************************************************************************
 *
 * This file contains "generator" macros. There are some instances where a
 * function in a class needs to be overridden, but that class has multiple child classes.
 * Since we can't modify the inheritance hierarchy, we have to perform the override in each
 * child class individually. To avoid repetition, the actual implementation of the
 * function is put into a static "Extensions" class, and each child class calls that
 * centralized implementation. To simplify further, those function definitions are placed
 * into macros here, so that each child class only needs to call its corresponding macro.
 *
 **************************************************************************************/

`include(generators_cheatmgr.uci)

// -----------------
// XComPresentationLayerBase
// -----------------

`define LWCE_GENERATOR_XCOMPRESENTATIONLAYERBASE \
var LWCE_UIModSettings m_kModSettings; \
\
reliable client simulated function LWCE_UIModSettings() \
{ \
    if (m_kModSettings == none) \
    { \
        PushState('State_ModSettings'); \
    } \
} \
\
simulated state State_PCKeybindings \
{ \
    simulated function Activate() \
    { \
        class'LWCE_XComPresentationLayerBase_Extensions'.static.State_PCKeybindings_Activate(self); \
    } \
} \
\
simulated state State_SaveScreen \
{ \
    simulated function Activate() \
    { \
        class'LWCE_XComPresentationLayerBase_Extensions'.static.State_SaveScreen_Activate(self); \
    } \
} \
\
simulated state State_LoadScreen \
{ \
    simulated function Activate() \
    { \
        class'LWCE_XComPresentationLayerBase_Extensions'.static.State_LoadScreen_Activate(self); \
    } \
} \
\
simulated state State_ModSettings extends BaseScreenState \
{ \
    simulated function Activate() \
    { \
        m_kModSettings = Spawn(class'LWCE_UIModSettings', self); \
        m_kModSettings.Init(XComPlayerController(Owner), GetHUD()); \
        m_kModSettings.Show(); \
    } \
\
    simulated function Deactivate() \
    { \
        GetHUD().RemoveScreen(m_kModSettings); \
        m_kModSettings = none; \
    } \
\
    simulated function OnReceiveFocus() \
    { \
        m_kModSettings.OnReceiveFocus(); \
    } \
\
    simulated function OnLoseFocus() \
    { \
        m_kModSettings.OnLoseFocus(); \
    } \
\
    stop; \
} \

// -----------------
// XGBattle
// -----------------

`define LWCE_GENERATOR_XGBATTLE \
function InitDescription() \
{ \
    class'LWCE_XGBattle_Extensions'.static.InitDescription(self); \
} \
\
simulated function InitLevel() \
{ \
    class'LWCE_XGBattle_Extensions'.static.InitLevel(self); \
} \
\
function InitLoadedItems() \
{ \
    class'LWCE_XGBattle_Extensions'.static.InitLoadedItems(self); \
} \
simulated function PostLevelLoaded() \
{ \
    super.PostLevelLoaded(); \
\
    class'LWCETacticalVisibilityHelper'.static.CreateAndInitialize(); \
} \
simulated function PostLoadSaveGame() \
{ \
    super.PostLoadSaveGame(); \
\
    class'LWCETacticalVisibilityHelper'.static.CreateAndInitialize(); \
} \





// -----------------
// XGPlayer
// -----------------

// Note: ideally FinishPendingSpawnUnit would be an extension method, but the compiler doesn't
// like us using the callback from a static context, for no apparent reason.

`define LWCE_GENERATOR_XGPLAYER \
function XGUnit SpawnUnit(class<XGUnit> kUnitClassToSpawn, PlayerController kPlayerController, Vector kLocation, Rotator kRotation, XGCharacter kCharacter, XGSquad kSquad, optional bool bDestroyOnBadLocation = false, optional XComSpawnPoint kSpawnPoint, optional bool bSnapToGround = true, optional bool bBattleScanner = false) \
{ \
    return class'LWCE_XGPlayer_Extensions'.static.SpawnUnit(self, kUnitClassToSpawn, kPlayerController, kLocation, kRotation, kCharacter, kSquad, bDestroyOnBadLocation, kSpawnPoint, bSnapToGround, bBattleScanner); \
} \
\
function FinishPendingSpawnUnit() \
{ \
    local XGUnit SpawnedUnit; \
    local delegate<UnitSpawnCallback> Callback; \
    local bool bGeneMods; \
\
    if (m_kPendingSpawnUnit.kNewChar != none) \
    { \
        bGeneMods = class'XComPerkManager'.static.HasAnyGeneMod(m_kPendingSpawnUnit.kNewChar.m_kChar.aUpgrades); \
        m_kPendingSpawnUnit.kNewChar.m_eType = EPawnType(class'XGBattleDesc'.static.MapSoldierToPawn(m_kPendingSpawnUnit.kNewChar.m_kChar.kInventory.iArmor, m_kPendingSpawnUnit.kNewChar.m_kSoldier.kAppearance.iGender, bGeneMods)); \
        SpawnedUnit = XGBattle_SP(`BATTLE).GetHumanPlayer().SpawnUnit(class'XGUnit', m_kPlayerController, m_kPendingSpawnUnit.kSpawnPoint.Location, m_kPendingSpawnUnit.kSpawnPoint.Rotation, m_kPendingSpawnUnit.kNewChar, m_kSquad,, m_kPendingSpawnUnit.kSpawnPoint); \
\
        if (m_kPendingSpawnUnit.bVIP) \
        { \
            SpawnedUnit.m_bVIP = true; \
        } \
\
        class'XGLoadoutMgr'.static.ApplyInventory(SpawnedUnit); \
\
        if (m_kPendingSpawnUnit.kNewChar.m_kChar.iType == eChar_Soldier) \
        { \
            XComHumanPawn(SpawnedUnit.GetPawn()).SetAppearance(m_kPendingSpawnUnit.kNewChar.m_kSoldier.kAppearance); \
        } \
\
        Callback = m_kPendingSpawnUnit.Callback; \
        m_kPendingSpawnUnit.kNewChar = none; \
        m_kPendingSpawnUnit.kSpawnPoint = none; \
        m_kPendingSpawnUnit.iContentRequests = 0; \
        m_kPendingSpawnUnit.Callback = None; \
\
        if (Callback != none) \
        { \
            Callback(SpawnedUnit); \
        } \
\
        TriggerGlobalEventClass(class'SeqEvent_OnUnitSpawned', SpawnedUnit); \
\
        `LWCE_GFX.OnUnitSpawned(SpawnedUnit); \
    } \
} \