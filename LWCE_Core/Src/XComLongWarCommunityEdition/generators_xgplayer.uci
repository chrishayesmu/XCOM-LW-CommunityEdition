// Note: ideally FinishPendingSpawnUnit would be an extension method, but the compiler doesn't
// like us using the callback from a static context, for no apparent reason.

`define LWCE_GENERATOR_XGPLAYER \
simulated function XGUnit SpawnAlien(EPawnType eAlienType, XComSpawnPoint_Alien kSpawnPt, optional bool bSnapToCover = false, optional bool bSnapToGround = true, optional bool bAddFlag = true, optional bool bUseAltWeapon = false, optional bool bBattleScanner = false) \
{ \
    return class'LWCE_XGPlayer_Extensions'.static.SpawnAlien(self, eAlienType, kSpawnPt, bSnapToCover, bSnapToGround, bAddFlag, bUseAltWeapon, bBattleScanner); \
} \
\
function XGUnit SpawnUnit(class<XGUnit> kUnitClassToSpawn, PlayerController kPlayerController, Vector kLocation, Rotator kRotation, XGCharacter kCharacter, XGSquad kSquad, optional bool bDestroyOnBadLocation = false, optional XComSpawnPoint kSpawnPoint, optional bool bSnapToGround = true, optional bool bBattleScanner = false) \
{ \
    return class'LWCE_XGPlayer_Extensions'.static.SpawnUnit(self, kUnitClassToSpawn, kPlayerController, kLocation, kRotation, kCharacter, kSquad, bDestroyOnBadLocation, kSpawnPoint, bSnapToGround, bBattleScanner); \
} \
\
simulated function XGUnit GetNearestEnemy(Vector vPoint, optional out float fClosestDist, optional bool bUseVisibleList = false, optional bool bConsiderCiviliansEnemies = false) \
{ \
    return class'LWCE_XGPlayer_Extensions'.static.GetNearestEnemy(self, vPoint, fClosestDist, bUseVisibleList, bConsiderCiviliansEnemies); \
} \
\
function FinishPendingSpawnUnit() \
{ \
    local XGUnit SpawnedUnit; \
    local delegate<UnitSpawnCallback> Callback; \
    local bool bGeneMods; \
\
    if (m_kPendingSpawnUnit.kNewChar != none) \
    { \
        bGeneMods = class'XComPerkManager'.static.HasAnyGeneMod(m_kPendingSpawnUnit.kNewChar.m_kChar.aUpgrades); \
        m_kPendingSpawnUnit.kNewChar.m_eType = EPawnType(class'XGBattleDesc'.static.MapSoldierToPawn(m_kPendingSpawnUnit.kNewChar.m_kChar.kInventory.iArmor, m_kPendingSpawnUnit.kNewChar.m_kSoldier.kAppearance.iGender, bGeneMods)); \
        SpawnedUnit = XGBattle_SP(`BATTLE).GetHumanPlayer().SpawnUnit(class'XGUnit', m_kPlayerController, m_kPendingSpawnUnit.kSpawnPoint.Location, m_kPendingSpawnUnit.kSpawnPoint.Rotation, m_kPendingSpawnUnit.kNewChar, m_kSquad,, m_kPendingSpawnUnit.kSpawnPoint); \
\
        if (m_kPendingSpawnUnit.bVIP) \
        { \
            SpawnedUnit.m_bVIP = true; \
        } \
\
        class'LWCE_XGLoadoutMgr'.static.ApplyInventory(SpawnedUnit); \
\
        if (m_kPendingSpawnUnit.kNewChar.m_kChar.iType == eChar_Soldier) \
        { \
            XComHumanPawn(SpawnedUnit.GetPawn()).SetAppearance(m_kPendingSpawnUnit.kNewChar.m_kSoldier.kAppearance); \
        } \
\
        Callback = m_kPendingSpawnUnit.Callback; \
        m_kPendingSpawnUnit.kNewChar = none; \
        m_kPendingSpawnUnit.kSpawnPoint = none; \
        m_kPendingSpawnUnit.iContentRequests = 0; \
        m_kPendingSpawnUnit.Callback = None; \
\
        if (Callback != none) \
        { \
            Callback(SpawnedUnit); \
        } \
\
        TriggerGlobalEventClass(class'SeqEvent_OnUnitSpawned', SpawnedUnit); \
    } \
    `LWCE_LOG_CLS("FinishPendingSpawnUnit end"); \
} \