/**************************************************************************************
 *
 * This file contains "generator" macros. There are some instances where a
 * function in a class needs to be overridden, but that class has multiple child classes.
 * Since we can't modify the inheritance hierarchy, we have to perform the override in each
 * child class individually. To avoid repetition, the actual implementation of the
 * function is put into a static "Extensions" class, and each child class calls that
 * centralized implementation. To simplify further, those function definitions are placed
 * into macros here, so that each child class only needs to call its corresponding macro.
 *
 **************************************************************************************/

`include(generators_abilities.uci)
`include(generators_aibehavior.uci)
`include(generators_cheatmgr.uci)
`include(generators_uisoldierlist.uci)
`include(generators_xgplayer.uci)

// -----------------
// XComPresentationLayerBase
// -----------------

`define LWCE_GENERATOR_XCOMPRESENTATIONLAYERBASE \
var LWCE_UIModSettings m_kModSettings; \
\
reliable client simulated function LWCE_UIModSettings() \
{ \
    if (m_kModSettings == none) \
    { \
        PushState('State_ModSettings'); \
    } \
} \
\
simulated state State_PCKeybindings \
{ \
    simulated function Activate() \
    { \
        class'LWCE_XComPresentationLayerBase_Extensions'.static.State_PCKeybindings_Activate(self); \
    } \
} \
\
simulated state State_SaveScreen \
{ \
    simulated function Activate() \
    { \
        class'LWCE_XComPresentationLayerBase_Extensions'.static.State_SaveScreen_Activate(self); \
    } \
} \
\
simulated state State_LoadScreen \
{ \
    simulated function Activate() \
    { \
        class'LWCE_XComPresentationLayerBase_Extensions'.static.State_LoadScreen_Activate(self); \
    } \
} \
\
simulated state State_ModSettings extends BaseScreenState \
{ \
    simulated function Activate() \
    { \
        m_kModSettings = Spawn(class'LWCE_UIModSettings', self); \
        m_kModSettings.Init(XComPlayerController(Owner), GetHUD()); \
        m_kModSettings.Show(); \
    } \
\
    simulated function Deactivate() \
    { \
        GetHUD().RemoveScreen(m_kModSettings); \
        m_kModSettings = none; \
    } \
\
    simulated function OnReceiveFocus() \
    { \
        m_kModSettings.OnReceiveFocus(); \
    } \
\
    simulated function OnLoseFocus() \
    { \
        m_kModSettings.OnLoseFocus(); \
    } \
\
    stop; \
} \

// -----------------
// XGBattle
// -----------------

`define LWCE_GENERATOR_XGBATTLE \
function InitDescription() \
{ \
    class'LWCE_XGBattle_Extensions'.static.InitDescription(self); \
} \
\
simulated function InitLevel() \
{ \
    class'LWCE_XGBattle_Extensions'.static.InitLevel(self); \
} \
\
function InitLoadedItems() \
{ \
    class'LWCE_XGBattle_Extensions'.static.InitLoadedItems(self); \
} \
simulated function PostLevelLoaded() \
{ \
    super.PostLevelLoaded(); \
\
    class'LWCETacticalVisibilityHelper'.static.CreateAndInitialize(); \
} \
simulated function PostLoadSaveGame() \
{ \
    super.PostLoadSaveGame(); \
\
    class'LWCETacticalVisibilityHelper'.static.CreateAndInitialize(); \
} \
\
simulated state Running \
{ \
    event BeginState(name PrevState) \
    { \
        super.BeginState(PrevState); \
\
        `LWCE_MOD_LOADER.OnBattleBegin(self); \
    } \
\
    simulated event Tick(float fDeltaT) \
    { \
        super.Tick(fDeltaT); \
    } \
}