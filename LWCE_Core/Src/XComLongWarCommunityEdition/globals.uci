`include(XComGame\Globals.uci);

`define LWCE_LOG_LEVEL(msg, cond, level)\
  `if(`cond)\
	`LOG(string(default.Class) $ ": " $ `msg, `cond && `level >= class'LWCE_XComEngine'.default.LogLevel, 'XComLongWarCommunityEdition')\
  `else\
	`LOG(string(default.Class) $ ": " $ `msg, `level >= class'LWCE_XComEngine'.default.LogLevel, 'XComLongWarCommunityEdition')\
  `endif

// Log macros for various log levels. Prepends the message with a level label.
`define LWCE_LOG_DEBUG(msg, cond)   `LWCE_LOG_LEVEL("[DEBUG] " $ `msg, `cond, 0)
`define LWCE_LOG_VERBOSE(msg, cond) `LWCE_LOG_LEVEL("[VERBOSE] " $ `msg, `cond, 1)
`define LWCE_LOG_INFO(msg, cond)    `LWCE_LOG_LEVEL("[INFO] " $ `msg, `cond, 2)
`define LWCE_LOG_WARN(msg, cond)    `LWCE_LOG_LEVEL("[WARN] " $ `msg, `cond, 3)
`define LWCE_LOG_ERROR(msg, cond)   `LWCE_LOG_LEVEL("[ERROR] " $ `msg, `cond, 4)

// Alias LWCE_LOG to be LWCE_LOG_INFO as the default log level
`define LWCE_LOG(msg, cond) `LWCE_LOG_INFO(`msg, `cond)

// TODO: get rid of LWCE_LOG_CLS and just use LWCE_LOG. We can do this in bulk once
// all outstanding feature branches are merged into master
`define LWCE_LOG_CLS(msg, cond) `LWCE_LOG(`msg, `cond)

// Special log macros for specific situations
`define LWCE_LOG_DEPRECATED(funcname) `LWCE_LOG("ERROR: LWCE-incompatible function `{funcname} was called. This needs to be replaced with LWCE_`funcname. Stack trace follows."); ScriptTrace();
`define LWCE_LOG_DEPRECATED_CLS(funcname) `LWCE_LOG_CLS("ERROR: LWCE-incompatible function `{funcname} was called. This needs to be replaced with LWCE_`funcname. Stack trace follows."); ScriptTrace();
`define LWCE_LOG_DEPRECATED_NOREPLACE_CLS(funcname) `LWCE_LOG_CLS("ERROR: LWCE-incompatible function `{funcname} was called. This function is deprecated and unavailable. Stack trace follows."); ScriptTrace();
`define LWCE_LOG_NOT_IMPLEMENTED(funcname) `LWCE_LOG_CLS("ERROR: function `{funcname} has not yet been implemented");

`define LWCE_EVENT_MGR (class'LWCE_XComEngine'.static.GetEventManager())
`define LWCE_MOD_LOADER (class'LWCEModLoader'.static.GetModLoader())

`define COLORTOSTR(clr) ("(R=" $ `clr.R $ ", G=" $ `clr.G $ ", B=" $ `clr.B $ ", A=" $ `clr.A $ ")")

// Convenience class of static functions
`define LWCE_UTILS class'LWCEUtils'.static

// Retrieve a template manager by class
`define LWCE_ABILITY_TEMPLATE_MGR (class'LWCEAbilityTemplateManager'.static.GetInstance())
`define LWCE_CONTENT_TEMPLATE_MGR (class'LWCEContentTemplateManager'.static.GetInstance())
`define LWCE_COUNCIL_REQUEST_TEMPLATE_MGR (class'LWCECouncilRequestTemplateManager'.static.GetInstance())
`define LWCE_FACILITY_TEMPLATE_MGR (class'LWCEFacilityTemplateManager'.static.GetInstance())
`define LWCE_FOUNDRY_TEMPLATE_MGR (class'LWCEFoundryProjectTemplateManager'.static.GetInstance())
`define LWCE_ITEM_TEMPLATE_MGR (class'LWCEItemTemplateManager'.static.GetInstance())
`define LWCE_TECH_TEMPLATE_MGR (class'LWCETechTemplateManager'.static.GetInstance())

// Retrieve templates by name
`define LWCE_ABILITY(nm) (`LWCE_ABILITY_TEMPLATE_MGR.FindAbilityTemplate(`nm))
`define LWCE_ARMOR(nm) (`LWCE_ITEM_TEMPLATE_MGR.FindArmorTemplate(`nm))
`define LWCE_EQUIPMENT(nm) (`LWCE_ITEM_TEMPLATE_MGR.FindEquipmentTemplate(`nm))
`define LWCE_FACILITY(nm) (`LWCE_FACILITY_TEMPLATE_MGR.FindFacilityTemplate(`nm))
`define LWCE_FTECH(nm) (`LWCE_FOUNDRY_TEMPLATE_MGR.FindProjectTemplate(`nm))
`define LWCE_ITEM(nm) (`LWCE_ITEM_TEMPLATE_MGR.FindItemTemplate(`nm))
`define LWCE_TECH(nm) (`LWCE_TECH_TEMPLATE_MGR.FindTechTemplate(`nm))
`define LWCE_SHIP_WEAPON(nm) (`LWCE_ITEM_TEMPLATE_MGR.FindShipWeaponTemplate(`nm))
`define LWCE_WEAPON(nm) (`LWCE_ITEM_TEMPLATE_MGR.FindWeaponTemplate(`nm))

// Create new template objects (only to be used in subclasses of LWCEDataSet)
`define CREATE_TEMPLATE(Class, TemplateObject, TemplateName) \
	`TemplateObject = new(None, string(`TemplateName)) `Class; \
    `TemplateObject.SetTemplateName(`TemplateName);

`define CREATE_ABILITY_TEMPLATE(Template, TemplateName) \
	`CREATE_TEMPLATE(class'LWCEAbilityTemplate', `Template, `TemplateName);

`define CREATE_BONUS_TEMPLATE(Template, TemplateName) \
	`CREATE_TEMPLATE(class'LWCEBonusTemplate', `Template, `TemplateName);

`define CREATE_EVENT_LISTENER_TEMPLATE(Template, TemplateName) \
	`CREATE_TEMPLATE(class'LWCEEventListenerTemplate', `Template, `TemplateName);

// Dynamic loading of objects that are referenced by the base game; since we aren't in the same UPK, we can't reference them the same way
`define SoundCue(nm) (SoundCue(DynamicLoadObject(`nm, class'SoundCue')))
`define XComNarrativeMoment(nm) (XComNarrativeMoment(DynamicLoadObject("NarrativeMoment." $ `nm, class'XComNarrativeMoment')))
`define XComNarrativeMomentEW(nm) (XComNarrativeMoment(DynamicLoadObject("NarrativeMomentsEWI." $ `nm, class'XComNarrativeMoment')))

// Shorthand macros for retrieving constant values
`define LW_HQ_BONUS_ID(nm) (class'LongWarConstants'.const.HQBonusID_`nm)
`define LW_PERK_ID(nm) (class'LongWarConstants'.const.PerkID_`nm)
`define LW_TECH_ID(nm) (class'LongWarConstants'.const.ResearchID_`nm)
`define LW_SECOND_WAVE_ID(nm) (class'LongWarConstants'.const.SecondWaveID_`nm)

// Macros for checking the current game state
`define LWCE_IS_STRAT_GAME (XComHeadquartersGame(class'Engine'.static.GetCurrentWorldInfo().Game) != none)
`define LWCE_IS_TAC_GAME (XComTacticalGame(class'Engine'.static.GetCurrentWorldInfo().Game) != none)

`define LWCE_CONTENT_MGR (LWCE_XComEngine(class'Engine'.static.GetEngine()).m_kCEContentMgr)

// ---------------------------
// Extension macros
//
// Some classes need to have methods deprecated and replaced with new versions, but since we
// can't modify the inheritance hierarchy, it's not feasible to do this in base classes which are
// broadly used. For those cases, we use static "extension" methods to implement the new functionality.
// These macros provide a shorthand for accessing them.
// ---------------------------

`define LWCE_WEAPON_FROM_XG(kWeapon) (class'LWCE_XGWeapon_Extensions'.static.GetCEWeapon(`kWeapon))

// ---------------------------
// Main menu shell layer macros
// ---------------------------
`define LWCE_SHELLPRES (LWCE_XComShellPresentationLayer(XComPlayerController(class'Engine'.static.GetCurrentWorldInfo().GetALocalPlayerController()).m_Pres))

// ---------------------------
// Strategy-or-tactical macros
// ---------------------------
`define LWCE_BONUS_LEVEL(nmBonus) \
	(`LWCE_IS_STRAT_GAME ? `LWCE_HQ.GetBonusLevel(`nmBonus) : -1 )

// ---------------------------
// Strategy layer macros
// ---------------------------

`define LWCE_STRATCFG(nm) (class'LWCE_XGStrategyConfig'.default.`nm)

`define LWCE_ABILITYTREE (LWCE_XGAbilityTree(`LWCE_GAMECORE.m_kAbilities))
`define LWCE_ALERT(nm) (class'LWCEAlertBuilder'.static.NewAlert(`nm))
`define LWCE_BARRACKS (LWCE_XGFacility_Barracks(`HQGAME.GetGameCore().GetHQ().GetBarracks()))
`define LWCE_CYBERNETICSLAB (LWCE_XGFacility_CyberneticsLab(`LWCE_BARRACKS.m_kCyberneticsLab))
`define LWCE_ENGINEERING (LWCE_XGFacility_Engineering(`HQGAME.GetGameCore().GetHQ().GetEngineering()))
`define LWCE_GAMECORE (LWCE_XGTacticalGameCore(`GAMECORE))
`define LWCE_GENELABS (LWCE_XGFacility_GeneLabs(`LWCE_BARRACKS.m_kGeneLabs))
`define LWCE_GEOSCAPE (LWCE_XGGeoscape(`HQGAME.GetGameCore().GetGeoscape()))
`define LWCE_HANGAR (LWCE_XGFacility_Hangar(`HQGAME.GetGameCore().GetHQ().GetHangar()))
`define LWCE_HQ (LWCE_XGHeadquarters(`HQGAME.GetGameCore().GetHQ()))
`define LWCE_HQPRES (LWCE_XComHQPresentationLayer(`HQPRES))
`define LWCE_ITEMTREE (LWCE_XGItemTree(`HQGAME.GetGameCore().GetHQ().GetEngineering().m_kItems))
`define LWCE_LABS (LWCE_XGFacility_Labs(`HQGAME.GetGameCore().GetHQ().GetLabs()))
`define LWCE_PERKS_STRAT (LWCE_XComPerkManager(`LWCE_BARRACKS.m_kPerkManager))
`define LWCE_PSILABS (LWCE_XGFacility_PsiLabs(`LWCE_BARRACKS.m_kPsiLabs))
`define LWCE_STORAGE (LWCE_XGStorage(`HQGAME.GetGameCore().GetHQ().m_kEngineering.GetStorage()))
`define LWCE_TECHTREE (LWCE_XGTechTree(`HQGAME.GetGameCore().GetHQ().GetLabs().m_kTree))

// ---------------------------
// Tactical layer macros
// ---------------------------

`define LWCE_CHEATMGR_TAC (LWCE_XComTacticalCheatManager(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).GetALocalPlayerController().CheatManager))
`define LWCE_PERKS_TAC (LWCE_XComPerkManager(XComGameReplicationInfo(class'Engine'.static.GetCurrentWorldInfo().GRI).m_kPerkTree))
`define LWCE_TAC_CARGO (LWCE_XGDropshipCargoInfo(`BATTLE.m_kDesc.m_kDropShipCargoInfo))
`define LWCE_TACCFG(nm) (class'LWCE_XGTacticalGameCore'.default.`nm)
`define LWCE_TACPRES (LWCE_XComPresentationLayer(`PRES))
`define LWCE_UNITFLAGMGR (LWCE_UIUnitFlagManager(`LWCE_TACPRES.m_kUnitFlagManager))
`define LWCE_VISHELPER (class'LWCETacticalVisibilityHelper'.static.GetInstance())
`define LWCE_VIS_MGR (LWCE_XComTacticalGRI(class'LWCE_XComEngine'.static.GetCurrentWorldInfo().GRI).m_kVisMgr)